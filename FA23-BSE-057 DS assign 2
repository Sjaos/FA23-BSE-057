#include <iostream>
#include <string>
using namespace std;

int main() {
    // Arrays to store patient details (max 100 patients)
    string names[100];
    int arrivalOrders[100];
    string conditions[100];
    int priorities[100];
    int size = 0; // Current number of patients
    int nextArrival = 1; // To track arrival order

    // Preload the given patients
    string givenNames[] = {"Patient A", "Patient B", "Patient C", "Patient D", "Patient E", 
                          "Patient F", "Patient G", "Patient H", "Patient I", "Patient J"};
    string givenConditions[] = {"Fever", "Heart Attack", "Broken Leg", "Mild Cold", "Severe Burn", 
                               "Small Cut", "Stroke", "Food Poisoning", "Fractured Arm", "Migraine"};
    int givenPriorities[] = {3, 1, 2, 4, 2, 4, 1, 3, 2, 3};

    // Add the given patients to the arrays
    for (int i = 0; i < 10; i++) {
        names[size] = givenNames[i];
        arrivalOrders[size] = nextArrival++;
        conditions[size] = givenConditions[i];
        priorities[size] = givenPriorities[i];
        size++;
    }

    // Display initial queue
    cout << "Initial Treatment Order:" << endl;
    cout << "-----------------------------" << endl;
    cout << "| Name\t| Arrival | Condition\t| Priority |" << endl;
    cout << "-----------------------------" << endl;
    for (int i = 0; i < size; i++) {
        cout << "| " << names[i] << "\t| " << arrivalOrders[i] << "\t  | " << conditions[i] << "\t| " << priorities[i] << "\t   |" << endl;
    }
    cout << "-----------------------------" << endl;

    // Menu loop
    while (true) {
        // Display menu
        cout << "\nHospital Menu:" << endl;
        cout << "1. Add a new patient" << endl;
        cout << "2. Treat the next patient" << endl;
        cout << "3. Show treatment order" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";

        int choice;
        cin >> choice;
        cin.ignore(); // Clear the newline character

        if (choice == 1) {
            // Add a new patient
            string name, condition;
            cout << "Enter patient name: ";
            getline(cin, name);
            cout << "Enter emergency condition (e.g., Fever, Heart Attack): ";
            getline(cin, condition);

            // Assign priority based on condition
            int priority;
            if (condition == "Heart Attack" || condition == "Stroke") {
                priority = 1;
            } else if (condition == "Broken Leg" || condition == "Severe Burn" || condition == "Fractured Arm") {
                priority = 2;
            } else if (condition == "Fever" || condition == "Food Poisoning" || condition == "Migraine") {
                priority = 3;
            } else if (condition == "Mild Cold" || condition == "Small Cut") {
                priority = 4;
            } else {
                priority = 4; // Default for unknown conditions
            }

            // Add patient to arrays
            names[size] = name;
            arrivalOrders[size] = nextArrival++;
            conditions[size] = condition;
            priorities[size] = priority;
            size++;

            // Sort the queue by priority (bubble sort)
            for (int i = 0; i < size - 1; i++) {
                for (int j = 0; j < size - i - 1; j++) {
                    if (priorities[j] > priorities[j + 1]) {
                        // Swap all details if priority is higher (lower number = higher priority)
                        string tempName = names[j];
                        names[j] = names[j + 1];
                        names[j + 1] = tempName;

                        int tempArrival = arrivalOrders[j];
                        arrivalOrders[j] = arrivalOrders[j + 1];
                        arrivalOrders[j + 1] = tempArrival;

                        string tempCondition = conditions[j];
                        conditions[j] = conditions[j + 1];
                        conditions[j + 1] = tempCondition;

                        int tempPriority = priorities[j];
                        priorities[j] = priorities[j + 1];
                        priorities[j + 1] = tempPriority;
                    }
                }
            }

            // Display updated queue
            cout << "Patient " << name << " added with priority " << priority << endl;
            cout << "Updated Treatment Order:" << endl;
            cout << "-----------------------------" << endl;
            cout << "| Name\t| Arrival | Condition\t| Priority |" << endl;
            cout << "-----------------------------" << endl;
            for (int i = 0; i < size; i++) {
                cout << "| " << names[i] << "\t| " << arrivalOrders[i] << "\t  | " << conditions[i] << "\t| " << priorities[i] << "\t   |" << endl;
            }
            cout << "-----------------------------" << endl;

        } else if (choice == 2) {
            // Treat the next patient (remove the first patient in the sorted queue)
            if (size == 0) {
                cout << "No patients in the queue!" << endl;
            } else {
                cout << "Treating patient: " << names[0] << " (" << conditions[0] << ", Priority: " << priorities[0] << ")" << endl;
                // Shift all patients up
                for (int i = 0; i < size - 1; i++) {
                    names[i] = names[i + 1];
                    arrivalOrders[i] = arrivalOrders[i + 1];
                    conditions[i] = conditions[i + 1];
                    priorities[i] = priorities[i + 1];
                }
                size--;

                // Display updated queue
                cout << "Updated Treatment Order:" << endl;
                cout << "-----------------------------" << endl;
                cout << "| Name\t| Arrival | Condition\t| Priority |" << endl;
                cout << "-----------------------------" << endl;
                if (size == 0) {
                    cout << "| (Empty)\t\t\t\t\t|" << endl;
                } else {
                    for (int i = 0; i < size; i++) {
                        cout << "| " << names[i] << "\t| " << arrivalOrders[i] << "\t  | " << conditions[i] << "\t| " << priorities[i] << "\t   |" << endl;
                    }
                }
                cout << "-----------------------------" << endl;
            }

        } else if (choice == 3) {
            // Display the current treatment order
            cout << "Current Treatment Order:" << endl;
            cout << "-----------------------------" << endl;
            cout << "| Name\t| Arrival | Condition\t| Priority |" << endl;
            cout << "-----------------------------" << endl;
            if (size == 0) {
                cout << "| (Empty)\t\t\t\t\t|" << endl;
            } else {
                for (int i = 0; i < size; i++) {
                    cout << "| " << names[i] << "\t| " << arrivalOrders[i] << "\t  | " << conditions[i] << "\t| " << priorities[i] << "\t   |" << endl;
                }
            }
            cout << "-----------------------------" << endl;

        } else if (choice == 4) {
            // Exit the program
            cout << "Exiting program." << endl;
            break;

        } else {
            cout << "Invalid choice! Please try again." << endl;
        }
    }

    return 0;
}